import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

app = dash.Dash(__name__)

app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                 dcc.Dropdown(id='site-dropdown',
                                    options=[
                                         {'label': 'All Sites', 'value': 'ALL'},
                                         {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},
                                         {'label': 'VAFB SLC-4E ', 'value': 'VAFB SLC-4E'},
                                         {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
                                         {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'},
                                    ],
                                    value='ALL',
                                    placeholder="Select a Launch Site here",
                                    searchable=True
                                    ),

                                html.Br(),

                                html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),

                                html.P("Payload range (Kg):"),
                                dcc.RangeSlider(id='payload-slider',
                                min=0,
                                max=10000,
                                step=1000,
                                value=[min_payload,max_payload]),

                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])
@app.callback(Output(component_id='success-pie-chart', component_property='figure'),
              Input(component_id='site-dropdown', component_property='value'))
def get_pie_chart(entered_site):
    if entered_site == 'ALL':
        df=spacex_df
        fig=px.pie(df, values='class',names='Launch Site',title='Total Success Launches By Site')
        return fig
    else:
        df1=spacex_df[spacex_df['Launch Site']==entered_site]
        filtered_df=df1.groupby('class').size().reset_index(name='Success Launch Count')
        fig=px.pie(filtered_df, values='Success Launch Count',
        names='class',
        title='Total Success Launches By ' + entered_site)
        return fig
@app.callback(Output(component_id='success-payload-scatter-chart', component_property='figure'),
              [Input(component_id='site-dropdown', component_property='value'),
               Input(component_id="payload-slider", component_property="value")])
def get_scatter(entered_site, payload):
    low, high = payload[0], payload[1]
    filtered_df=spacex_df[spacex_df['Payload Mass (kg)'].between(low,high)]
    if (entered_site=='ALL'):
        fig=px.scatter(filtered_df, x='Payload Mass (kg)', y='class', color='Booster Version Category',title='Relationship between Payload and Success Rate for All Sites')
        return fig
    else:
        filtered_df2= filtered_df[filtered_df['Launch Site']==entered_site]
        fig=px.scatter(filtered_df2, x='Payload Mass (kg)', y='class', color='Booster Version Category',title='Relationship between Payload and Success Rate for ' + entered_site)
        return fig

if __name__ == '__main__':
    app.run_server()

